{"version":3,"file":"static/js/487.bf82da6a.chunk.js","mappings":"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","sources":["Redux/Contacts/selectors.js","components/Form/Form.js","components/Contacts/ContactsStyled.js","components/Contacts/Contacts.js","components/Filter/Filter.js","components/AppContacts.js","views/ContactsView.js"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\n\nexport const selectContacts = state => state.contacts.items;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectVisibleContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  }\n);\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'Redux/Contacts/contactsAPI';\nimport { selectVisibleContacts } from 'Redux/Contacts/selectors';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .trim()\n    .matches(\n      //eslint-disable-next-line\n      /^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required(),\n  number: yup\n    .string()\n    .trim()\n    .matches(\n      /\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst Forma = () => {\n  const contacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  const onSubmit = (values, actions) => {\n    const { name, number } = values;\n    const isSameContact = contacts.some(\n      contact =>\n        contact.name.toLowerCase() === name.toLowerCase() ||\n        contact.number === number\n    );\n\n    if (isSameContact) {\n      alert(`${name} or ${number}: is already in contacts`);\n      actions.resetForm();\n\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    actions.resetForm();\n  };\n\n  return (\n    <div>\n      <Formik\n        initialValues={{\n          name: '',\n          number: '',\n        }}\n        validationSchema={schema}\n        onSubmit={onSubmit}\n      >\n        <Form>\n          <label htmlFor=\"name\">\n            Name\n            <Field id=\"name\" name=\"name\" placeholder=\"Name\" />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </label>\n\n          <label htmlFor=\"number\">\n            Number\n            <Field id=\"number\" name=\"number\" placeholder=\"+380100000000\" />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default Forma;\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  gap: 16px;\n`;\n\nexport const Button = styled.button`\n  border: none;\n  outline: none;\n  border-radius: 8px;\n  background-color: #ffff00;\n`;\n","import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectVisibleContacts } from 'Redux/Contacts/selectors';\nimport { List, Item, Button } from './ContactsStyled';\nimport { fetchContacts, deleteContact } from 'Redux/Contacts/contactsAPI';\n\nconst ContactsList = () => {\n  const filteredContacts = useSelector(selectVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <List>\n      {filteredContacts.map(({ name, number, id }) => (\n        <Item key={id}>\n          <span>{name}:</span>\n          <span>{number}:</span>\n\n          <Button type=\"button\" onClick={() => dispatch(deleteContact(id))}>\n            Delete\n          </Button>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nexport default ContactsList;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'Redux/Filter/filterSlice';\nimport { selectFilter } from 'Redux/Contacts/selectors';\n\nconst Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <div>Find contacts by name</div>\n      <input\n        type=\"text\"\n        value={filter}\n        onChange={evt => dispatch(setFilter(evt.target.value))}\n        placeholder=\"search\"\n      />\n    </div>\n  );\n};\n\nexport default Filter;\n","import Forma from './Form/Form';\nimport ContactsList from './Contacts/Contacts';\nimport Filter from './Filter/Filter';\n\nexport const AppContacts = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Forma />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectIsLoading } from 'Redux/Contacts/selectors';\nimport { fetchContacts } from 'Redux/Contacts/contactsAPI';\nimport { AppContacts } from 'components/AppContacts';\n\nconst barStyles = {\n  display: 'flex',\n  alignItems: 'flex-end',\n  marginBottom: 20,\n};\n\nexport default function ContactsView() {\n  const dispatch = useDispatch();\n  const isLoadingContacts = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div style={barStyles}>\n      <div>{isLoadingContacts && 'Please wait...'}</div>\n      <AppContacts />\n    </div>\n  );\n}\n"],"names":["selectFilter","state","filter","selectIsLoading","contacts","isLoading","selectVisibleContacts","createSelector","items","contact","name","toLowerCase","includes","schema","yup","shape","trim","matches","required","number","useSelector","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","actions","some","alert","resetForm","addContact","htmlFor","id","placeholder","component","type","List","styled","Item","Button","filteredContacts","useEffect","fetchContacts","map","onClick","deleteContact","value","onChange","evt","setFilter","target","AppContacts","Form","Contacts","barStyles","display","alignItems","marginBottom","ContactsView","isLoadingContacts","style"],"sourceRoot":""}